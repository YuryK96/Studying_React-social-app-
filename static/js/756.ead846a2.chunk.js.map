{"version":3,"file":"static/js/756.ead846a2.chunk.js","mappings":"wOAEaA,EAAkB,SAACC,GAC9B,OAAOA,EAAMC,YAAYC,YAC1B,EAEYC,EAAiB,SAACH,GAC7B,OAAOA,EAAMC,YAAYG,WAC1B,ECPD,GAAgB,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,2B,6BCGzKC,EAA4C,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnD,GAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SAEAC,GAHF,EAEEC,UAAaC,OAFf,EAGEF,cACAG,EAJF,EAIEA,MAOF,OACE,0BACE,kBAAMC,SAAUJ,GANwB,SAACK,GAC3CR,EAAcQ,EAAKC,YACnBH,GACD,IAGG,WACE,uCAAcJ,EAAS,eAAvB,IAAsCQ,KAAM,GAAIC,KAAM,OACtD,0BACE,kBAAOC,KAAK,SAASC,MAAO,eAKrC,EAsBD,EApB8C,SAAC,GAGxC,IAFLjB,EAEI,EAFJA,aACAI,EACI,EADJA,cAEIc,EAAclB,EAAamB,KAAI,SAACC,EAASC,GAC3C,OACE,gBAAaC,UAAWC,EAAAA,QAAxB,UACE,uBAAIH,EAAQA,WADJC,EAIb,IAED,OACE,iBAAKC,UAAWC,EAAAA,QAAhB,UACGL,GACD,SAACf,EAAD,CAAYC,cAAeA,MAGhC,E,UC5BD,EAdwC,SAAC,GAAqB,IACxDoB,EADuD,EAAlBtB,YACbiB,KAAI,SAACM,GAC/B,OACE,gBAAqBH,UAAWC,EAAAA,OAAhC,UACE,SAAC,KAAD,CAASG,GAAI,aAAeD,EAAOE,GAAnC,UACE,uBAAIF,EAAOG,UAFLH,EAAOE,GAMpB,IAED,OAAO,gBAAKL,UAAWC,EAAAA,cAAhB,SAA2CC,GACnD,ECED,EAbqC,SAAC,GAI/B,IAHLpB,EAGI,EAHJA,cACAJ,EAEI,EAFJA,aACAE,EACI,EADJA,YAEA,OACE,iBAAKoB,UAAWC,EAAAA,QAAhB,WACE,SAAC,EAAD,CAAYrB,YAAaA,KACzB,SAAC2B,EAAD,CAAUzB,cAAeA,EAAeJ,aAAcA,MAG3D,ECAD,GAAe8B,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KARoB,SAACjC,GACrB,MAAO,CACLE,aAAcH,EAAgBC,GAC9BI,YAAaD,EAAeH,GAE/B,GAKG,CAAEM,cAAe4B,EAAAA,EAAAA,gBAEnBC,EAAAA,EALF,CAMEC,E","sources":["redux/dialog-selectors.ts","webpack://social_network-pet_project-/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import { AppStateType } from \"./redux-store\";\r\n\r\nexport const getMessagesData = (state: AppStateType) => {\r\n  return state.dialogsPage.messagesData;\r\n};\r\n\r\nexport const getDialogsData = (state: AppStateType) => {\r\n  return state.dialogsPage.dialogsData;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__UD7GO\",\"dialogWrapper\":\"Dialogs_dialogWrapper__KNQ3d\",\"dialog\":\"Dialogs_dialog__7ZYfY\",\"active\":\"Dialogs_active__cxeMk\",\"messages\":\"Dialogs_messages__Ll4Gv\"};","import { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { MessageType } from \"../../../types/types\";\r\nimport DialogsCss from \"./../Dialogs.module.css\";\r\n\r\nconst NewMessage: React.FC<PropsTypeNewMessage> = ({ addNewMessage }) => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm<FormValues>();\r\n\r\n  const onSubmit: SubmitHandler<FormValues> = (data) => {\r\n    addNewMessage(data.newMessage);\r\n    reset();\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <textarea {...register(\"newMessage\")} cols={30} rows={10}></textarea>\r\n        <div>\r\n          <input type=\"submit\" value={\"Send\"} />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC<PropsTypeMessages> = ({\r\n  messagesData,\r\n  addNewMessage,\r\n}) => {\r\n  let arrMessages = messagesData.map((message, i) => {\r\n    return (\r\n      <div key={i} className={DialogsCss.message}>\r\n        <p>{message.message}</p>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={DialogsCss.message}>\r\n      {arrMessages}\r\n      <NewMessage addNewMessage={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n\r\ntype PropsTypeNewMessage = {\r\n  addNewMessage: (newMessage: string) => void;\r\n};\r\n\r\ntype FormValues = {\r\n  newMessage: string;\r\n};\r\n\r\ntype PropsTypeMessages = {\r\n  addNewMessage: (newMessage: string) => void;\r\n  messagesData: Array<MessageType>;\r\n};\r\n","import DialogsCss from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DialogType } from \"../../../types/types\";\r\n\r\nconst DialogItem: React.FC<Propstype> = ({ dialogsData }) => {\r\n  let arrDialog = dialogsData.map((dialog) => {\r\n    return (\r\n      <div key={dialog.id} className={DialogsCss.dialog}>\r\n        <NavLink to={\"/Messages/\" + dialog.id}>\r\n          <p>{dialog.name}</p>\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className={DialogsCss.dialogWrapper}>{arrDialog}</div>;\r\n};\r\n\r\nexport default DialogItem;\r\n\r\ntype Propstype = {\r\n  dialogsData: Array<DialogType>;\r\n};\r\n","import DialogsCss from \"./Dialogs.module.css\";\r\nimport Messages from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { DialogType, MessageType } from \"../../types/types\";\r\n\r\nconst Dialogs: React.FC<PropsType> = ({\r\n  addNewMessage,\r\n  messagesData,\r\n  dialogsData,\r\n}) => {\r\n  return (\r\n    <div className={DialogsCss.dialogs}>\r\n      <DialogItem dialogsData={dialogsData} />\r\n      <Messages addNewMessage={addNewMessage} messagesData={messagesData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n\r\ntype PropsType = {\r\n  addNewMessage: (newMessage: string) => void;\r\n  messagesData: Array<MessageType>;\r\n  dialogsData: Array<DialogType>;\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { WithAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { actions } from \"../../redux/dialog-reducer\";\r\nimport { getDialogsData, getMessagesData } from \"../../redux/dialog-selectors\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { DialogType, MessageType } from \"../../types/types\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    messagesData: getMessagesData(state),\r\n    dialogsData: getDialogsData(state),\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n    mapStateToProps,\r\n    { addNewMessage: actions.addNewMessage }\r\n  ),\r\n  WithAuthRedirect\r\n)(Dialogs);\r\n\r\ntype MapStatePropsType = {\r\n  messagesData: Array<MessageType>;\r\n  dialogsData: Array<DialogType>;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  addNewMessage: (newMessage: string) => void;\r\n};\r\n\r\ntype OwnPropsType = {};\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n"],"names":["getMessagesData","state","dialogsPage","messagesData","getDialogsData","dialogsData","NewMessage","addNewMessage","useForm","register","handleSubmit","formState","errors","reset","onSubmit","data","newMessage","cols","rows","type","value","arrMessages","map","message","i","className","DialogsCss","arrDialog","dialog","to","id","name","Message","compose","connect","actions","WithAuthRedirect","Dialogs"],"sourceRoot":""}