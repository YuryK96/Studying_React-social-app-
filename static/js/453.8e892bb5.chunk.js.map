{"version":3,"file":"static/js/453.8e892bb5.chunk.js","mappings":"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","sources":["webpack://social_network-pet_project-/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatuswithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-selectors.ts","webpack://social_network-pet_project-/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://social_network-pet_project-/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ProfileInfo_item__e808d\",\"content\":\"ProfileInfo_content__zbUR2\",\"head_img\":\"ProfileInfo_head_img__TnzrM\",\"avatar\":\"ProfileInfo_avatar__twI4q\",\"status\":\"ProfileInfo_status__osEoK\",\"label\":\"ProfileInfo_label__EfUPH\"};","import ProfileInfoCss from \"./ProfileInfo.module.css\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { PhotoType, UserProfileType } from \"../../../types/types\";\r\n\r\nconst ProfileDataForm: React.FC<ProfileDataFormType> = ({\r\n  profile,\r\n  isOwner,\r\n  savePhoto,\r\n  OutFromEditMode,\r\n  updateProfile,\r\n  userId,\r\n}) => {\r\n  const {\r\n    register,\r\n    formState: { errors, isValid },\r\n    handleSubmit,\r\n    reset,\r\n    setError,\r\n    clearErrors,\r\n  } = useForm<FormValues>({\r\n    mode: \"onBlur\",\r\n  });\r\n\r\n  const mainPhotoSelected = (e: { target: HTMLInputElement }) => {\r\n    if (e.target?.files?.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit: SubmitHandler<FormValues> = (data) => {\r\n    let CompletedForm = {\r\n      aboutMe: data.aboutMe,\r\n      fullName: data.name,\r\n      lookingForAJob: data.lookingForAJob,\r\n      lookingForAJobDescription: data.lookingForAJobDescription,\r\n      userId: userId,\r\n      photos: {\r\n        large: null,\r\n        small: null,\r\n      },\r\n      contacts: {\r\n        facebook: data.facebook,\r\n        github: data.github,\r\n        instagram: data.instagram,\r\n        mainLink: data.mainLink,\r\n        twitter: data.twitter,\r\n        vk: data.vk,\r\n        website: data.website,\r\n        youtube: data.youtube,\r\n      },\r\n    };\r\n    updateProfile(CompletedForm, userId, setError);\r\n    reset();\r\n    OutFromEditMode();\r\n  };\r\n\r\n  return (\r\n    <div className={ProfileInfoCss.item}>\r\n      <div className={ProfileInfoCss.avatar}>\r\n        <div className={ProfileInfoCss.name}>\r\n          <b> {profile.fullName} </b>\r\n        </div>\r\n        <img\r\n          src={\r\n            profile.photos.large ||\r\n            \"https://img.freepik.com/free-vector/businessman-character-avatar-isolated_24877-60111.jpg?w=2000\"\r\n          }\r\n          alt=\"\"\r\n        />\r\n\r\n        {isOwner && (\r\n          <input type={\"file\"} onChange={(e) => mainPhotoSelected(e)} />\r\n        )}\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div>\r\n          <div>\r\n            <div>\r\n              <b> Name</b>\r\n            </div>\r\n            <input\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"name\", {\r\n                value: profile.fullName,\r\n                required: \"need to fill form\",\r\n\r\n                minLength: {\r\n                  value: 1,\r\n\r\n                  message: \"need more symbols\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div>\r\n            {(errors?.name && (\r\n              <p style={{ color: \"red\" }}>\r\n                {errors?.name?.message || \"Error!\"}\r\n              </p>\r\n            )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n          </div>{\" \"}\r\n          <div>\r\n            {\" \"}\r\n            <b> About Me</b>\r\n          </div>\r\n          <input\r\n            onFocus={() => {\r\n              clearErrors();\r\n            }}\r\n            {...register(\"aboutMe\", {\r\n              required: \"need to fill form\",\r\n              value: profile.aboutMe,\r\n              minLength: {\r\n                value: 1,\r\n\r\n                message: \"need more symbols\",\r\n              },\r\n            })}\r\n          />\r\n        </div>\r\n        <div>\r\n          {(errors?.aboutMe && (\r\n            <p style={{ color: \"red\" }}>\r\n              {errors?.aboutMe?.message || \"Error!\"}\r\n            </p>\r\n          )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n        </div>\r\n\r\n        <div>\r\n          {\" \"}\r\n          <b> Work </b>\r\n        </div>\r\n\r\n        <div>\r\n          <label htmlFor=\"lookingForAJob\">Are you looking for a job?</label>{\" \"}\r\n          <input {...register(\"lookingForAJob\")} type={\"checkbox\"} />\r\n        </div>\r\n\r\n        <div>\r\n          <div>\r\n            <label\r\n              style={{ display: \"block\" }}\r\n              htmlFor=\"lookingForAJobDescription\"\r\n            >\r\n              dream job describtion\r\n            </label>\r\n            <input\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              type=\"text\"\r\n              {...register(\"lookingForAJobDescription\", {\r\n                required: \"need to fill form\",\r\n                value: profile.lookingForAJobDescription,\r\n                minLength: {\r\n                  value: 1,\r\n\r\n                  message: \"need more symbols\",\r\n                },\r\n              })}\r\n            />\r\n          </div>\r\n          <div>\r\n            {errors?.lookingForAJobDescription && (\r\n              <p style={{ color: \"red\" }}>\r\n                {errors?.lookingForAJobDescription?.message || \"Error!\"}\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div>\r\n            {\" \"}\r\n            <b> Contacts</b>\r\n          </div>\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"facebook \">\r\n              facebook:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"facebook\", {\r\n                value: profile.contacts.facebook,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.facebook && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.facebook?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"website \">\r\n              website:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"website\", {\r\n                value: profile.contacts.website,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.website && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.website?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"vk \">\r\n              vk:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"vk\", {\r\n                value: profile.contacts.vk,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.vk && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.vk?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"twitter \">\r\n              twitter:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"twitter\", {\r\n                value: profile.contacts.twitter,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.twitter && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.twitter?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"instagram \">\r\n              instagram:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"instagram\", {\r\n                value: profile.contacts.instagram,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.instagram && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.instagram?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"youtube \">\r\n              youtube:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"youtube\", {\r\n                value: profile.contacts.youtube,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.youtube && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.youtube?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"github \">\r\n              github:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"github\", {\r\n                value: profile.contacts.github,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.github && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.github?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className={ProfileInfoCss.label} htmlFor=\"mainLink \">\r\n              mainLink:\r\n            </label>\r\n            <input\r\n              type=\"url\"\r\n              onFocus={() => {\r\n                clearErrors();\r\n              }}\r\n              {...register(\"mainLink\", {\r\n                value: profile.contacts.mainLink,\r\n              })}\r\n            />\r\n\r\n            <div>\r\n              {(errors?.mainLink && (\r\n                <p style={{ color: \"red\" }}>\r\n                  {errors?.mainLink?.message || \"Error!\"}\r\n                </p>\r\n              )) || <p style={{ color: \"red\" }}>{errors?.server?.message}</p>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <input disabled={!isValid} type=\"submit\" />\r\n        </div>\r\n      </form>\r\n      <div>\r\n        <button onClick={OutFromEditMode}>Back</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileDataForm;\r\n\r\ntype ProfileDataFormType = {\r\n  profile: UserProfileType;\r\n  isOwner: boolean;\r\n  userId: number | null;\r\n  OutFromEditMode: () => void;\r\n  savePhoto: (photo: File) => void;\r\n  updateProfile: (\r\n    data: UserProfileType,\r\n    userId: number | null,\r\n    setError: any\r\n  ) => void;\r\n};\r\n\r\ntype FormValues = {\r\n  aboutMe: string | null;\r\n  facebook: string | null;\r\n  github: string | null;\r\n  instagram: string | null;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string | null;\r\n  mainLink: string | null;\r\n  name: string | null;\r\n  twitter: string | null;\r\n  vk: string | null;\r\n  website: string | null;\r\n  youtube: string | null;\r\n  server?: string;\r\n};\r\n","import ProfileInfoCss from \"./ProfileInfo.module.css\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ProfileStatuswithHooks: React.FC<ProfileStatuswithHooksType> = ({\r\n  status,\r\n  updateStatus,\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [statusState, setStatusState] = useState(status);\r\n\r\n  useEffect(() => {\r\n    setStatusState(status);\r\n  }, [status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(statusState);\r\n  };\r\n  const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setStatusState(event.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span role=\"span\" onDoubleClick={activateEditMode}>\r\n            {status || \"------\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {editMode && (\r\n        <div>\r\n          {\" \"}\r\n          <input\r\n            autoFocus\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={statusState}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatuswithHooks;\r\n\r\ntype ProfileStatuswithHooksType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n","import { useState } from \"react\";\r\nimport { ContactsType, PhotoType, UserProfileType } from \"../../../types/types\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport ProfileInfoCss from \"./ProfileInfo.module.css\";\r\nimport ProfileStatuswithHooks from \"./ProfileStatuswithHooks\";\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  updateProfile,\r\n  userId,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div className={ProfileInfoCss.content}>\r\n      <div className={ProfileInfoCss.head_img}>\r\n        <img\r\n          src=\"https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      {editMode ? (\r\n        <ProfileDataForm\r\n          OutFromEditMode={() => {\r\n            setEditMode(false);\r\n          }}\r\n          profile={profile}\r\n          isOwner={isOwner}\r\n          updateProfile={updateProfile}\r\n          userId={userId}\r\n          savePhoto={savePhoto}\r\n        />\r\n      ) : (\r\n        <ProfileData\r\n          profile={profile}\r\n          isOwner={isOwner}\r\n          goToEditMode={() => {\r\n            setEditMode(true);\r\n          }}\r\n        />\r\n      )}\r\n      <div className={ProfileInfoCss.status}>\r\n        <ProfileStatuswithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataType = {\r\n  profile: UserProfileType;\r\n  goToEditMode: () => void;\r\n  isOwner: boolean;\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({\r\n  profile,\r\n  isOwner,\r\n  goToEditMode,\r\n}) => {\r\n  return (\r\n    <div className={ProfileInfoCss.item}>\r\n      {isOwner && (\r\n        <div>\r\n          {\" \"}\r\n          <button onClick={goToEditMode}>Edit</button>\r\n        </div>\r\n      )}\r\n      <div className={ProfileInfoCss.avatar}>\r\n        <div className={ProfileInfoCss.name}>\r\n          <b> {profile.fullName} </b>\r\n        </div>\r\n        <img\r\n          src={\r\n            profile.photos.large ||\r\n            \"https://img.freepik.com/free-vector/businessman-character-avatar-isolated_24877-60111.jpg?w=2000\"\r\n          }\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        {\" \"}\r\n        <b> About Me</b>\r\n      </div>\r\n      <div className={ProfileInfoCss.aboutMe}>{profile.aboutMe}</div>\r\n\r\n      <div>\r\n        <div>\r\n          {\" \"}\r\n          <b> Work </b>\r\n        </div>\r\n        {profile.lookingForAJob ? (\r\n          <div>Open to work </div>\r\n        ) : (\r\n          <div>Not in looking for</div>\r\n        )}\r\n        <div>{profile.lookingForAJobDescription}</div>\r\n      </div>\r\n\r\n      <div>\r\n        <div>\r\n          {\" \"}\r\n          <b> Contacts</b>\r\n        </div>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contacts\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof ContactsType]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileContactsType = {\r\n  contactTitle: string | null;\r\n  contactValue: string | null;\r\n};\r\n\r\nconst Contacts: React.FC<ProfileContactsType> = ({\r\n  contactTitle,\r\n  contactValue,\r\n}) => {\r\n  return (\r\n    <div>\r\n      {contactTitle} : {contactValue}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileInfo;\r\n\r\ntype ProfileInfoType = {\r\n  profile: UserProfileType | null;\r\n  status: string;\r\n  userId: number | null;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (photo: File) => void;\r\n  updateProfile: (\r\n    data: UserProfileType,\r\n    userId: number | null,\r\n    setError: any\r\n  ) => void;\r\n  isOwner: boolean;\r\n};\r\n","import { createSelectorHook } from \"react-redux\";\r\nimport { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nexport const getUserProfile = (state: AppStateType) => {\r\n  return state.profilePage.userProfile;\r\n};\r\n\r\nexport const getProfileStatus = (state: AppStateType) => {\r\n  return state.profilePage.status;\r\n};\r\n\r\nexport const getmyPostData = (state: AppStateType) => {\r\n  return state.profilePage.myPostData;\r\n};\r\n\r\nexport const getnewPostText = (state: AppStateType) => {\r\n  return state.profilePage.newPostText;\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"newMessage\":\"MyPosts_newMessage__RVi5U\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Post_wrapper__kyEaw\",\"post\":\"Post_post__b7TRF\",\"likes\":\"Post_likes__uuGyZ\",\"countLikes\":\"Post_countLikes__szywF\"};","import PostCss from \"./Post.module.css\";\r\n\r\nconst Post: React.FC<PostType> = ({ countLikes, value }) => {\r\n  return (\r\n    <div className={PostCss.wrapper}>\r\n      <img\r\n        src=\"https://img.freepik.com/free-vector/businessman-character-avatar-isolated_24877-60111.jpg?w=2000\"\r\n        alt=\"\"\r\n      />\r\n      <div className={PostCss.likes}>\r\n        likes: <p className={PostCss.countLikes}>{countLikes}</p>\r\n      </div>\r\n      <div className={PostCss.post}>{value}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n\r\ntype PostType = {\r\n  countLikes: number;\r\n  value: string;\r\n};\r\n","import React from \"react\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { MyPostType } from \"../../../types/types\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Posts/Post\";\r\n\r\nconst MyPosts: React.FC<MyPostsType> = React.memo(\r\n  ({ myPostData, onAddPost }) => {\r\n    const {\r\n      register,\r\n      formState: { errors, isValid },\r\n      handleSubmit,\r\n      reset,\r\n    } = useForm<FormValues>();\r\n\r\n    let arrPostData = myPostData.map((post, i) => {\r\n      return <Post key={i} value={post.value} countLikes={post.countLikes} />;\r\n    });\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = (data) => {\r\n      onAddPost(data.newPostText);\r\n      reset();\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <textarea\r\n            className={s.newMessage}\r\n            style={\r\n              errors?.newPostText ? { border: \"1px solid red\" } : undefined\r\n            }\r\n            {...register(\"newPostText\", {\r\n              required: \"need to text something\",\r\n              maxLength: {\r\n                value: 20,\r\n                message: \"need less 20 symbols\",\r\n              },\r\n            })}\r\n            cols={30}\r\n            rows={5}\r\n          />\r\n          <div>\r\n            <p style={{ color: \"red\" }}>{errors?.newPostText?.message}</p>{\" \"}\r\n            <input type={\"submit\"} />\r\n          </div>\r\n        </form>\r\n        {arrPostData}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default MyPosts;\r\n\r\ntype MyPostsType = {\r\n  myPostData: Array<MyPostType>;\r\n  onAddPost: (newPostText: string) => void;\r\n};\r\ntype FormValues = {\r\n  newPostText: string;\r\n};\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { actions } from \"../../../redux/profile-reducer\";\r\nimport {\r\n  getmyPostData,\r\n  getnewPostText,\r\n} from \"../../../redux/profile-selectors\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { MyPostType } from \"../../../types/types\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    myPostData: getmyPostData(state),\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n    mapStateToProps,\r\n    { onAddPost: actions.onAddPost }\r\n  )\r\n)(MyPosts);\r\n\r\ntype OwnPropsType = {};\r\ntype MapStatePropsType = {\r\n  myPostData: Array<MyPostType>;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  onAddPost: (newPostText: string) => void;\r\n};\r\n","import ProfileCss from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { PhotoType, UserProfileType } from \"../../types/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getProfileStatus,\r\n  getUserProfile,\r\n} from \"../../redux/profile-selectors\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { getUserId } from \"../../redux/auth-selectors\";\r\nimport { AppDispatch } from \"../../redux/redux-store\";\r\nimport {\r\n  setUser,\r\n  getStatus,\r\n  savePhoto,\r\n  updateStatus,\r\n  updateProfile,\r\n} from \"../../redux/profile-reducer\";\r\nimport { compose } from \"redux\";\r\nimport { WithAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { ComponentType, useEffect } from \"react\";\r\n\r\nconst Profile: React.FC<ProfileType> = ({ router }) => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const profile = useSelector(getUserProfile);\r\n  const status = useSelector(getProfileStatus);\r\n  const userId = useSelector(getUserId);\r\n\r\n  const onSetUser = (paramsUserId: number) => {\r\n    dispatch(setUser(paramsUserId));\r\n  };\r\n  const onGetStatus = (paramsUserId: number) => {\r\n    dispatch(getStatus(paramsUserId));\r\n  };\r\n  const onUpdateStatus = (status: string) => {\r\n    dispatch(updateStatus(status));\r\n  };\r\n\r\n  const onSavePhoto = (photo: File) => {\r\n    dispatch(savePhoto(photo));\r\n  };\r\n\r\n  const onUpdateProfile = (\r\n    data: UserProfileType,\r\n    userId: number | null,\r\n    setError: any\r\n  ) => {\r\n    dispatch(updateProfile(data, userId, setError));\r\n  };\r\n\r\n  const onRefreshProfile = () => {\r\n    let paramsUserId = router.params.userId;\r\n\r\n    if (!paramsUserId) {\r\n      paramsUserId = userId;\r\n    }\r\n    onSetUser(paramsUserId);\r\n    onGetStatus(paramsUserId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    onRefreshProfile();\r\n  }, [router.params.userId]);\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={!router.params.userId}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={onUpdateStatus}\r\n        savePhoto={onSavePhoto}\r\n        updateProfile={onUpdateProfile}\r\n        userId={userId}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction withRouter<WCP extends JSX.IntrinsicAttributes>(\r\n  WrappedComponent: ComponentType<WCP>\r\n) {\r\n  const ComponentWithRouterProp: React.FC<{}> = (props) => {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return (\r\n      <WrappedComponent\r\n        {...(props as unknown as WCP)}\r\n        router={{ location, navigate, params }}\r\n      />\r\n    );\r\n  };\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  WithAuthRedirect\r\n)(Profile);\r\n\r\ntype ProfileType = {\r\n  router: {\r\n    location: {\r\n      hash: string;\r\n      key: string;\r\n      pathname: string;\r\n      search: string;\r\n      state: null;\r\n    };\r\n    navigate: () => void;\r\n    params: any;\r\n  };\r\n};\r\n"],"names":["profile","isOwner","savePhoto","OutFromEditMode","updateProfile","userId","useForm","mode","register","formState","errors","isValid","handleSubmit","reset","setError","clearErrors","className","ProfileInfoCss","fullName","src","photos","large","alt","type","onChange","e","target","files","length","mainPhotoSelected","onSubmit","data","CompletedForm","aboutMe","name","lookingForAJob","lookingForAJobDescription","small","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","onFocus","value","required","minLength","message","style","color","server","htmlFor","display","disabled","onClick","status","updateStatus","useState","editMode","setEditMode","statusState","setStatusState","useEffect","role","onDoubleClick","autoFocus","onBlur","event","currentTarget","ProfileData","goToEditMode","Object","keys","map","key","Contacts","contactTitle","contactValue","Preloader","getUserProfile","state","profilePage","userProfile","getProfileStatus","getmyPostData","myPostData","countLikes","PostCss","React","onAddPost","arrPostData","post","i","newPostText","s","border","undefined","maxLength","cols","rows","compose","connect","actions","MyPosts","WrappedComponent","props","location","useLocation","navigate","useNavigate","params","useParams","router","WithAuthRedirect","dispatch","useDispatch","useSelector","getUserId","onRefreshProfile","paramsUserId","setUser","onSetUser","getStatus","onGetStatus","photo","MyPostsContainer"],"sourceRoot":""}