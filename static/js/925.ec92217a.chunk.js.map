{"version":3,"file":"static/js/925.ec92217a.chunk.js","mappings":"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","sources":["pages/Chat/ChatPage.tsx","../node_modules/@mui/icons-material/Send.js"],"sourcesContent":["import { Avatar, Box, Button, TextField, Typography } from \"@mui/material\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Divider from \"@mui/material/Divider\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport Preloader from \"../../components/common/Preloader/Preloader\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppDispatch, AppStateType } from \"../../redux/redux-store\";\nimport {\n  ChatMessageType,\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from \"../../redux/chat-reducer\";\nimport { ChatMessageApiType } from \"../../api/chat-api\";\n\nconst ChatPage: React.FC = () => {\n  return (\n    <Box>\n      <Chat />\n    </Box>\n  );\n};\n\nconst Chat: React.FC = () => {\n  const statusChannel = useSelector((state: AppStateType) => state.chat.status);\n  const dispatch: AppDispatch = useDispatch();\n  useEffect(() => {\n    dispatch(startMessagesListening());\n\n    return () => {\n      dispatch(stopMessagesListening());\n    };\n  }, []);\n\n  return (\n    <>\n      {statusChannel !== \"read\" && (\n        <Box\n          position={\"fixed\"}\n          z-index={2}\n          width={\"100%\"}\n          display={\"flex\"}\n          justifyContent={\"center\"}\n        >\n          {\" \"}\n          <Preloader />{\" \"}\n        </Box>\n      )}\n      <Box display={\"flex\"} width={\"100%\"} flexDirection={\"column\"}>\n        <Messages />\n        <AddmessageForm />\n      </Box>\n    </>\n  );\n};\nconst Messages: React.FC<{}> = ({}) => {\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    let element = e.currentTarget;\n    if (\n      Math.abs(\n        element.scrollHeight - element.clientHeight - element.scrollTop\n      ) < 1\n    ) {\n      setIsAutoScroll(true);\n    } else if (\n      isAutoScroll === true &&\n      Math.abs(\n        element.scrollHeight - element.clientHeight - element.scrollTop\n      ) < 10\n    ) {\n      setIsAutoScroll(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  return (\n    <Box\n      onScroll={(e) => scrollHandler(e)}\n      sx={{\n        height: \"65vh\",\n        overflowY: \"auto\",\n      }}\n    >\n      {messages.map((m: ChatMessageType, index) => {\n        return (\n          <Box key={m.id}>\n            <Message message={m} /> <Divider />{\" \"}\n          </Box>\n        );\n      })}\n      <Box ref={messagesAnchorRef}></Box>\n    </Box>\n  );\n};\nconst Message: React.FC<{ message: ChatMessageApiType }> = React.memo(\n  ({ message }) => {\n    return (\n      <Box display={\"flex\"} alignItems={\"center\"} m={2}>\n        <Box\n          width={100}\n          display={\"flex\"}\n          justifyContent={\"center\"}\n          alignItems={\"center\"}\n          flexDirection={\"column\"}\n        >\n          {\" \"}\n          <Typography fontSize={13} textAlign={\"center\"}>\n            {message.userName}\n          </Typography>\n          <Avatar sizes={\"100%\"} variant=\"rounded\" src={message.photo} />{\" \"}\n        </Box>\n        <Typography marginLeft={\"10%\"} textAlign={\"center\"}>\n          {message.message}\n        </Typography>\n      </Box>\n    );\n  }\n);\nconst AddmessageForm: React.FC<{}> = ({}) => {\n  const statusChannel = useSelector((state: AppStateType) => state.chat.status);\n  const [message, setMessage] = useState(\"\");\n\n  const dispatch: AppDispatch = useDispatch();\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    reset,\n  } = useForm<FormValues>();\n\n  const onSubmit: SubmitHandler<FormValues> = () => {};\n\n  const sendMessageHandler = () => {\n    if (!message) {\n      return;\n    }\n\n    dispatch(sendMessage(message));\n    setMessage(\"\");\n  };\n\n  const onKeyDownHandler = (\n    event: React.KeyboardEvent<HTMLDivElement>\n  ): void => {\n    if ((event.key === \"Enter\" && event.ctrlKey) || event.key === \"Enter\") {\n      event.preventDefault();\n      event.stopPropagation();\n\n      statusChannel === \"read\" && sendMessageHandler();\n    }\n  };\n  return (\n    <Box height={\"17vh\"}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Box m={3} display={\"flex\"}>\n          <TextField\n            onKeyDown={(e) => onKeyDownHandler(e)}\n            label=\"New Message\"\n            multiline\n            {...register(\"newMessage\")}\n            minRows={2}\n            onChange={(e) => setMessage(e.currentTarget.value)}\n            value={message}\n          />\n          <Box alignSelf={\"end\"} marginLeft={1}>\n            <Button\n              disabled={statusChannel !== \"read\"}\n              type=\"submit\"\n              variant=\"outlined\"\n              endIcon={<SendIcon />}\n              onClick={sendMessageHandler}\n            >\n              Send\n            </Button>\n          </Box>\n        </Box>\n      </form>\n    </Box>\n  );\n};\nexport default ChatPage;\n\ntype FormValues = {\n  newMessage: string;\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2.01 21 23 12 2.01 3 2 10l15 2-15 2z\"\n}), 'Send');\nexports.default = _default;"],"names":["Chat","statusChannel","useSelector","state","chat","status","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","position","width","display","justifyContent","flexDirection","Messages","AddmessageForm","messagesAnchorRef","useRef","messages","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","clientHeight","scrollTop","scrollHandler","sx","height","overflowY","map","m","index","Message","message","id","ref","React","alignItems","fontSize","textAlign","userName","sizes","variant","src","photo","marginLeft","setMessage","useForm","register","handleSubmit","formState","errors","sendMessageHandler","reset","sendMessage","onSubmit","onKeyDown","event","key","ctrlKey","preventDefault","stopPropagation","label","multiline","minRows","onChange","value","alignSelf","disabled","type","endIcon","onClick","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}