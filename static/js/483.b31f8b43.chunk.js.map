{"version":3,"file":"static/js/483.b31f8b43.chunk.js","mappings":"4LACA,OAAgB,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,2B,0DCoC/K,EA/B8C,SAAC,GAGxC,IAFLA,EAEI,EAFJA,aACAC,EACI,EADJA,cAEMC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,UAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAM,IAAIC,gBAAgBT,EAASU,UACnCL,EAAQM,OAAOH,EAAII,IAAI,WAC7BN,EAASD,GACTD,EAAaN,EAAae,WAAU,SAACC,GAAD,OAAOA,EAAEC,KAAOV,CAAhB,IACrC,GAAE,CAACL,EAASU,WAEb,IAAIM,EAAclB,EAAaK,GAAWL,aAAamB,KAAI,SAACC,EAAMC,GAChE,OACE,gBAAaC,UAAWC,EAAAA,QAAxB,UACE,uBAAIH,EAAKI,WADDH,EAIb,IAED,OACE,iBAAKC,UAAWC,EAAAA,QAAhB,UACGL,GACD,SAACO,EAAD,CAAYxB,cAAeA,EAAeM,MAAOA,MAGtD,EAIKkB,EAA4C,SAAC,GAG5C,IAFLxB,EAEI,EAFJA,cACAM,EACI,EADJA,MAEA,GAKImB,EAAAA,EAAAA,MAJFC,EADF,EACEA,SAEAC,GAHF,EAEEC,UAAaC,OAFf,EAGEF,cACAG,EAJF,EAIEA,MAOF,OACE,0BACE,kBAAMC,SAAUJ,GANwB,SAACK,GAC3ChC,EAAcgC,EAAKC,WAAY3B,GAC/BwB,GACD,IAGG,WACE,uCAAcJ,EAAS,eAAvB,IAAsCQ,KAAM,GAAIC,KAAM,OACtD,0BACE,kBAAOC,KAAK,SAASC,MAAO,eAKrC,E,UC9CD,EAdwC,SAAC,GAAqB,IACxDC,EADuD,EAAlBC,YACbrB,KAAI,SAACsB,GAC/B,OACE,gBAAqBnB,UAAWC,EAAAA,OAAhC,UACE,SAAC,KAAD,CAASmB,GAAI,qBAAuBD,EAAOxB,GAA3C,UACE,uBAAIwB,EAAOE,UAFLF,EAAOxB,GAMpB,IAED,OAAO,gBAAKK,UAAWC,EAAAA,cAAhB,SAA2CgB,GACnD,E,UCdYK,EAAiB,SAACC,GAC7B,OAAOA,EAAMC,YAAYN,WAC1B,E,oBC0BD,GAAeO,E,QAAAA,IAAQC,EAAAA,EAAvB,EAlBqC,WACnC,IAAMC,GAAwBC,EAAAA,EAAAA,MACxBV,GAAcW,EAAAA,EAAAA,IAAYP,GAMhC,OACE,iBAAKtB,UAAWC,EAAAA,QAAhB,WACE,SAAC,EAAD,CAAYiB,YAAaA,KACzB,SAACY,EAAD,CACEnD,cARsB,SAACiC,EAAoBjB,GAC/CgC,EAASI,EAAAA,EAAAA,cAAsBnB,EAAYjB,GAC5C,EAOKjB,aAAcwC,MAIrB,G","sources":["webpack://social_network-pet_project-/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","redux/dialog-selectors.ts","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__UD7GO\",\"dialogWrapper\":\"Dialogs_dialogWrapper__KNQ3d\",\"dialog\":\"Dialogs_dialog__7ZYfY\",\"active\":\"Dialogs_active__cxeMk\",\"messages\":\"Dialogs_messages__Ll4Gv\"};","import { useEffect, useState } from \"react\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { DialogType, MessageType } from \"../../../types/types\";\r\nimport DialogsCss from \"./../Dialogs.module.css\";\r\n\r\nconst Messages: React.FC<PropsTypeMessages> = ({\r\n  messagesData,\r\n  addNewMessage,\r\n}) => {\r\n  const location = useLocation();\r\n  const [userIndex, getUserIndex] = useState(0);\r\n  const [urlId, getUrlId] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const url = new URLSearchParams(location.pathname);\r\n    const urlId = Number(url.get(\"userId\"));\r\n    getUrlId(urlId);\r\n    getUserIndex(messagesData.findIndex((x) => x.id === urlId));\r\n  }, [location.pathname]);\r\n\r\n  let arrMessages = messagesData[userIndex].messagesData.map((item, i) => {\r\n    return (\r\n      <div key={i} className={DialogsCss.message}>\r\n        <p>{item.message}</p>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className={DialogsCss.message}>\r\n      {arrMessages}\r\n      <NewMessage addNewMessage={addNewMessage} urlId={urlId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n\r\nconst NewMessage: React.FC<PropsTypeNewMessage> = ({\r\n  addNewMessage,\r\n  urlId,\r\n}) => {\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm<FormValues>();\r\n\r\n  const onSubmit: SubmitHandler<FormValues> = (data) => {\r\n    addNewMessage(data.newMessage, urlId);\r\n    reset();\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <textarea {...register(\"newMessage\")} cols={30} rows={10}></textarea>\r\n        <div>\r\n          <input type=\"submit\" value={\"Send\"} />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype PropsTypeNewMessage = {\r\n  addNewMessage: (newMessage: string, userIndex: number) => void;\r\n  urlId: number;\r\n};\r\n\r\ntype FormValues = {\r\n  newMessage: string;\r\n};\r\n\r\ntype PropsTypeMessages = {\r\n  addNewMessage: (newMessage: string, urlId: number) => void;\r\n  messagesData: Array<DialogType>;\r\n};\r\n","import DialogsCss from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DialogType } from \"../../../types/types\";\r\n\r\nconst DialogItem: React.FC<Propstype> = ({ dialogsData }) => {\r\n  let arrDialog = dialogsData.map((dialog) => {\r\n    return (\r\n      <div key={dialog.id} className={DialogsCss.dialog}>\r\n        <NavLink to={\"/Messages/&userId=\" + dialog.id}>\r\n          <p>{dialog.name}</p>\r\n        </NavLink>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return <div className={DialogsCss.dialogWrapper}>{arrDialog}</div>;\r\n};\r\n\r\nexport default DialogItem;\r\n\r\ntype Propstype = {\r\n  dialogsData: Array<DialogType>;\r\n};\r\n","import { AppStateType } from \"./redux-store\";\r\n\r\nexport const getDialogsData = (state: AppStateType) => {\r\n  return state.dialogsPage.dialogsData;\r\n};\r\n","import DialogsCss from \"./Dialogs.module.css\";\r\nimport Messages from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDialogsData } from \"../../redux/dialog-selectors\";\r\nimport { AppDispatch } from \"../../redux/redux-store\";\r\nimport { actions } from \"../../redux/dialog-reducer\";\r\n\r\nimport { WithAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\nimport { compose } from \"redux\";\r\n\r\nconst Dialogs: React.FC<PropsType> = () => {\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const dialogsData = useSelector(getDialogsData);\r\n\r\n  const handleAddNewMessage = (newMessage: string, id: number) => {\r\n    dispatch(actions.addNewMessage(newMessage, id));\r\n  };\r\n\r\n  return (\r\n    <div className={DialogsCss.dialogs}>\r\n      <DialogItem dialogsData={dialogsData} />\r\n      <Messages\r\n        addNewMessage={handleAddNewMessage}\r\n        messagesData={dialogsData}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default compose(WithAuthRedirect)(Dialogs);\r\n\r\ntype PropsType = any;\r\n"],"names":["messagesData","addNewMessage","location","useLocation","useState","userIndex","getUserIndex","urlId","getUrlId","useEffect","url","URLSearchParams","pathname","Number","get","findIndex","x","id","arrMessages","map","item","i","className","DialogsCss","message","NewMessage","useForm","register","handleSubmit","formState","errors","reset","onSubmit","data","newMessage","cols","rows","type","value","arrDialog","dialogsData","dialog","to","name","getDialogsData","state","dialogsPage","compose","WithAuthRedirect","dispatch","useDispatch","useSelector","Message","actions"],"sourceRoot":""}